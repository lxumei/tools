#!/usr/bin/env python3
import sys
import os
import struct
import argparse
import binascii
import struct

class Elf:
    def __init__(self, filename):
        self.filename = filename
        self.read_elf()
        self.header_parser()
        self.program_header_parser()
        self.section_header_parser()
        self.dynamic_section_parser()
        self.dynsym_parser()
        self.rela_parser()

    def read_elf(self):
        f = open(self.filename, 'rb')
        self.data = f.read()
        f.close()

    def header_parser(self):
        self.e_ident = self.data[0:16]
        self.e_class = self.data[4]
        if(self.e_ident[0:4] != b"\x7fELF" or (self.e_class != 1 and self.e_class != 2)):
            raise Exception("invalid elf file")

        if(self.e_ident[4] == 1):
            self.bits = "ELF32"
        else:
            self.bits = "ELF64"
            
        if self.e_ident[5] not in [1,2]:
            raise Exception("Invalid data encoding!")

        if self.e_ident[6] != 1:
            raise Exception("Invalid Version!")

        self.e_type = {}
        self.e_type[b'\x00\x00'] = 'ET_NONE'
        self.e_type[b'\x01\x00'] = 'ET_REL'
        self.e_type[b'\x02\x00'] = 'ET_EXEC'
        self.e_type[b'\x03\x00'] = 'ET_DYN'
        self.e_type[b'\x04\x00'] = 'ET_CORE'
        self.e_type[b'\x00\xfe'] = 'ET_LOOS'
        self.e_type[b'\xff\xfe'] = 'ET_HIOS'
        self.e_type[b'\x00\xff'] = 'ET_LOPROC'
        self.e_type[b'\xff\xff'] = 'ET_HIPROC'
        if self.data[16:18] not in self.e_type:
            raise Exception("Invalid Type!")

        self.e_machine = {}
        self.e_machine[b'\x00\x00'] = 'No specific instruction set'
        self.e_machine[b'\x01\x00'] = 'AT&T WE 32100'
        self.e_machine[b'\x02\x00'] = 'SPARC'
        self.e_machine[b'\x03\x00'] = 'x86'
        self.e_machine[b'\x04\x00'] = 'Motorola 68000 (M68k)'
        self.e_machine[b'\x05\x00'] = 'Motorola 88000 (M88k)'
        self.e_machine[b'\x06\x00'] = 'Intel MCU'
        self.e_machine[b'\x07\x00'] = 'Intel 80860'
        self.e_machine[b'\x08\x00'] = 'MIPS'
        self.e_machine[b'\x09\x00'] = 'IBM_System/370'
        self.e_machine[b'\x0A\x00'] = 'MIPS RS3000 Little-endian'
        self.e_machine[b'\x0B\x00'] = 'Reserved for future use'
        self.e_machine[b'\x0C\x00'] = 'Reserved for future use'
        self.e_machine[b'\x0D\x00'] = 'Reserved for future use'
        self.e_machine[b'\x0E\x00'] = 'Hewlett-Packard PA-RISC'
        self.e_machine[b'\x0F\x00'] = 'Reserved for future use'
        self.e_machine[b'\x13\x00'] = 'Intel 80960'
        self.e_machine[b'\x14\x00'] = 'PowerPC'
        self.e_machine[b'\x15\x00'] = 'PowerPC (64-bit)'
        self.e_machine[b'\x16\x00'] = 'S390, including S390x'
        self.e_machine[b'\x28\x00'] = 'ARM (up to ARMv7/Aarch32)'
        self.e_machine[b'\x2A\x00'] = 'SuperH'
        self.e_machine[b'\x32\x00'] = 'IA-64'
        self.e_machine[b'\x3E\x00'] = 'amd64'
        self.e_machine[b'\x8C\x00'] = 'TMS320C6000 Family'
        self.e_machine[b'\xB7\x00'] = 'ARM 64-bits (ARMv8/Aarch64)'
        self.e_machine[b'\xF3\x00'] = 'RISC-V'
        self.e_machine[b'\xF7\x00'] = 'Berkeley Packet Filter'
        self.e_machine[b'\x01\x01'] = 'WDC 65C816'
        if self.data[18:20] not in self.e_machine:
            raise Exception("%s: Invalid Machine!" % binascii.hexlify(self.data[18:20]))
        
        if self.e_ident[4] == 1:
            self.e_entry = struct.unpack('<l', self.data[24:28])[0]
            self.e_phoff = struct.unpack('<l', self.data[28:32])[0]
            self.e_shoff = struct.unpack('<l', self.data[32:36])[0]
            self.e_flags = struct.unpack('<l', self.data[36:40])[0]
            self.e_ehsize = struct.unpack('<H', self.data[40:42])[0]
            self.e_phentsize = struct.unpack('<H', self.data[42:44])[0]
            self.e_phnum = struct.unpack('<H', self.data[44:46])[0]
            self.e_shentsize = struct.unpack('<H', self.data[46:48])[0]
            self.e_shnum = struct.unpack('<H', self.data[48:50])[0]
            self.e_shstrndx = struct.unpack('<H', self.data[50:52])[0]
        else:
            self.e_entry = struct.unpack('<Q', self.data[24:32])[0]
            self.e_phoff = struct.unpack('<Q', self.data[32:40])[0]
            self.e_shoff = struct.unpack('<Q', self.data[40:48])[0]
            self.e_flags = struct.unpack('<l', self.data[48:52])[0]
            self.e_ehsize = struct.unpack('<H', self.data[52:54])[0]
            self.e_phentsize = struct.unpack('<H', self.data[54:56])[0]
            self.e_phnum = struct.unpack('<H', self.data[56:58])[0]
            self.e_shentsize = struct.unpack('<H', self.data[58:60])[0]
            self.e_shnum = struct.unpack('<H', self.data[60:62])[0]
            self.e_shstrndx = struct.unpack('<H', self.data[62:64])[0]


    def header_print(self):
        res = ""
        res += "ELF Header:\n"
        res += "    Magic: "
        for ch in self.e_ident:
            res += "%02x "%ch
        res += "\n"

        res += "    Class: ".ljust(40)
        res += self.bits + "\n"

        res += "    Data: ".ljust(40)
        if(self.e_ident[5] == 1):
            res += "2's complement, little endian\n"
        else:
            res += "2's complement, big endian\n"

        res += "    Versoin: ".ljust(40)
        res += str(self.e_ident[6]) + "\n"

        res += "    Type: ".ljust(40)
        res += self.e_type[self.data[16:18]] + "\n"

        res += "    Machine: ".ljust(40)
        res += self.e_machine[self.data[18:20]] + "\n"

        res += "    Entry point address: ".ljust(40)
        res += "0x%x\n" % self.e_entry

        res += "    Start of program headers: ".ljust(40)
        res += "%d (bytes into file)\n" % self.e_phoff

        res += "    Start of section headers: ".ljust(40)
        res += "%d (bytes into file)\n" % self.e_shoff

        res += "    Flags: ".ljust(40)
        res += "%d\n" % self.e_flags

        res += "    Size of this header: ".ljust(40)
        res += "%d (bytes)\n" % self.e_ehsize

        res += "    Size of program headers: ".ljust(40)
        res += "%d (bytes)\n" % self.e_phentsize

        res += "    Number of program headers: ".ljust(40)
        res += "%d\n" % self.e_phnum

        res += "    Size of section headers: ".ljust(40)
        res += "%d (bytes)\n" % self.e_shentsize

        res += "    Number of section headers: ".ljust(40)
        res += "%d\n" % self.e_shnum

        res += "    Section header string table index: ".ljust(40)
        res += "%d\n" % self.e_shstrndx

        print(res)

    def program_header_parser(self):
        self.program_header_list = []

        if self.e_ident[4] == 1:
            step = 0x20
        else:
            step = 0x38

        start = self.e_phoff
        count = 0
        while count < self.e_phnum:
            type_number = self.data[start:start+4]

            p_type = ''
            if type_number == b'\x00\x00\x00\x00':
                break
            elif type_number == b'\x01\x00\x00\x00':
                p_type = 'LOAD'
            elif type_number == b'\x02\x00\x00\x00':
                p_type = 'DYNAMIC'
            elif type_number == b'\x03\x00\x00\x00':
                p_type = 'INTERP'
            elif type_number == b'\x04\x00\x00\x00':
                p_type = 'NOTE'
            elif type_number == b'\x05\x00\x00\x00':
                p_type = 'SHLIB'
            elif type_number == b'\x06\x00\x00\x00':
                p_type = 'PHDR'
            elif type_number == b'\x07\x00\x00\x00':
                p_type = 'TLS'
            elif type_number == b'\x00\x00\x00\x60':
                p_type = 'LOOS'
            elif type_number == b'\xFF\xFF\xFF\x6F':
                p_type = 'HIOS'
            elif type_number == b'\x00\x00\x00\x70':
                p_type = 'LOPROC'
            elif type_number == b'\xFF\xFF\xFF\x7F':
                p_type = 'HIPROC'
            elif type_number == b'\x50\xE5\x74\x64':
                p_type = 'PT_GNU_EH_FRAME'
            elif type_number == b'\x51\xE5\x74\x64':
                p_type = 'PT_GNU_STACK'
            elif type_number == b'\x52\xE5\x74\x64':
                p_type = 'PT_GNU_RELRO'
            else:
                raise Exception("0x%x Couldn't resovle this type!" % struct.unpack('<l', type_number)[0])

            if self.e_ident[4] == 1:
                flags = struct.unpack('<l', self.data[start + 0x18 : start + 0x18 + 4])[0]
                offset = struct.unpack('<l', self.data[start + 0x4 : start + 0x4 + 4])[0]
                vaddr = struct.unpack('<l', self.data[start + 0x8 : start + 0x8 + 4])[0]
                paddr = struct.unpack('<l', self.data[start + 0xc : start + 0xc + 4])[0]
                filesz = struct.unpack('<l', self.data[start + 0x10 : start + 0x10 + 4])[0]
                memsz = struct.unpack('<l', self.data[start + 0x14 : start + 0x14 + 4])[0]
                align = struct.unpack('<l', self.data[start + 0x1c : start + 0x1c + 4])[0]
            else:
                flags = struct.unpack('<l', self.data[start + 0x4 : start + 0x4 + 4])[0]
                offset = struct.unpack('<Q', self.data[start + 0x8 : start + 0x8 + 8])[0]
                vaddr = struct.unpack('<Q', self.data[start + 0x10 : start + 0x10 + 8])[0]
                paddr = struct.unpack('<Q', self.data[start + 0x18 : start + 0x18 + 8])[0]
                filesz = struct.unpack('<Q', self.data[start + 0x20 : start + 0x20 + 8])[0]
                memsz = struct.unpack('<Q', self.data[start + 0x28 : start + 0x28 + 8])[0]
                align = struct.unpack('<Q', self.data[start + 0x30 : start + 0x30 + 8])[0]

            self.program_header_list.append({"p_type": p_type, "p_flags":flags, "p_offset":offset,
                                        "p_vaddr":vaddr, "p_paddr":paddr, "p_filesz":filesz,
                                        "p_memsz":memsz, "p_align":align})
            start = start + step
            count = count + 1
    
    def program_header_print(self):
        print('Program Headers:')
        print(' Type'.ljust(20) + 'Offset'.ljust(20) + 'VirAddr'.ljust(20) + 'PhysAddr'.ljust(20))
        print(''.ljust(20) + 'FileSize'.ljust(20) + 'MemSize'.ljust(20) + 'Flags'.ljust(10) + 'Align'.ljust(10))

        for cur in self.program_header_list:
            print(' ' + cur["p_type"].ljust(19) + ('0x%016x' % cur["p_offset"]).ljust(20) + ('0x%016x' % cur["p_vaddr"]).ljust(20)
                    + ('0x%016x' % cur["p_paddr"]).ljust(20))
            print(''.ljust(20) +  ('0x%016x' % cur["p_filesz"]).ljust(20) + ('0x%016x' % cur["p_memsz"]).ljust(20) + 
                  ('0x%x'%cur["p_flags"]).ljust(10) + '0x%x'%cur["p_align"])
    
    def section_header_parser(self):
        self.section_header_list = []

        if self.e_ident[4] == 1:
            step = 0x28
        else:
            step = 0x40

        start = self.e_shoff
        count = 0

        if self.e_ident[4] == 1:
            shstrtab = struct.unpack('<l', self.data[start + step * self.e_shstrndx + 0x10 : start + step * self.e_shstrndx + 0x10 + 4])[0]
        else:
            shstrtab = struct.unpack('<Q', self.data[start + step * self.e_shstrndx + 0x18 : start + step * self.e_shstrndx + 0x18 + 8])[0]

        while count < self.e_shnum:
            s_name = struct.unpack('<l', self.data[start:start+4])[0]
            s_type = struct.unpack('<l', self.data[start+4:start+8])[0]
            if s_type == 0x0:
                sh_type = 'NULL'
            elif s_type == 0x1:
                sh_type = 'PROGBITS'
            elif s_type == 0x2:
                sh_type = 'SYMTAB'
            elif s_type == 0x3:
                sh_type = 'STRTAB'
            elif s_type == 0x3:
                sh_type = 'STRTAB'
            elif s_type == 0x4:
                sh_type = 'RELA'
            elif s_type == 0x5:
                sh_type = 'HASH'
            elif s_type == 0x6:
                sh_type = 'DYNAMIC'
            elif s_type == 0x7:
                sh_type = 'NOTE'
            elif s_type == 0x8:
                sh_type = 'NOBITS'
            elif s_type == 0x9:
                sh_type = 'REL'
            elif s_type == 0xA:
                sh_type = 'SHLIB'
            elif s_type == 0xB:
                sh_type = 'DYNSYM'
            elif s_type == 0xE:
                sh_type = 'INIT_ARRAY'
            elif s_type == 0xF:
                sh_type = 'FINI_ARRAY'
            elif s_type == 0x10:
                sh_type = 'PREINIT_ARRAY'
            elif s_type == 0x11:
                sh_type = 'GROUP'
            elif s_type == 0x12:
                sh_type = 'SYMTAB_SHNDX'
            elif s_type == 0x13:
                sh_type = 'NUM'
            elif s_type == 0x60000000:
                sh_type = 'LOOS'
           # else:
               # raise Exception("0x%x, Unknown section type!" % s_type)

            if self.e_ident[4] == 1:
                s_flags = struct.unpack('<l', self.data[start + 0x8 : start + 0x8 + 4])[0]
                sh_addr = struct.unpack('<l', self.data[start + 0x0c : start + 0x0c + 4])[0]
                sh_offset = struct.unpack('<l', self.data[start + 0x10 : start + 0x10 + 4])[0]
                sh_size = struct.unpack('<l', self.data[start + 0x14 : start + 0x14 + 4])[0]
                sh_link = struct.unpack('<l', self.data[start + 0x18 : start + 0x18 + 4])[0]
                sh_info = struct.unpack('<l', self.data[start + 0x1C : start + 0x1C + 4])[0]
                sh_addralign = struct.unpack('<l', self.data[start + 0x20 : start + 0x20 + 4])[0]
                sh_entsize = struct.unpack('<l', self.data[start + 0x24 : start + 0x24 + 4])[0]
            else:
                s_flags = struct.unpack('<Q', self.data[start + 0x8 : start + 0x8 + 8])[0]
                sh_addr = struct.unpack('<Q', self.data[start + 0x10 : start + 0x10 + 8])[0]
                sh_offset = struct.unpack('<Q', self.data[start + 0x18 : start + 0x18 + 8])[0]
                sh_size = struct.unpack('<Q', self.data[start + 0x20 : start + 0x20 + 8])[0]
                sh_link = struct.unpack('<l', self.data[start + 0x28 : start + 0x28 + 4])[0]
                sh_info = struct.unpack('<l', self.data[start + 0x2C : start + 0x2C + 4])[0]
                sh_addralign = struct.unpack('<Q', self.data[start + 0x30 : start + 0x30 + 8])[0]
                sh_entsize = struct.unpack('<Q', self.data[start + 0x38 : start + 0x38 + 8])[0]
            
            start = start + step
            count = count + 1

            sh_name = self.help_print_string(shstrtab + s_name)
            self.section_header_list.append({"sh_name" : sh_name, "sh_type" : sh_type, "sh_flags" : s_flags,
                                    "sh_addr" : sh_addr, "sh_offset" : sh_offset, "sh_size" : sh_size,
                                    "sh_link" : sh_link, "sh_info" : sh_info, "sh_addralign" : sh_addralign,
                                    "sh_entsize" : sh_entsize})

    def section_header_print(self):
        print('Section Headers')
        print('  [Nr] ' + 'Name'.ljust(20) + 'Type'.ljust(20) + 'Address'.ljust(20) + 'Offset'.ljust(20))
        print('       ' + 'Size'.ljust(20) + 'EntSize'.ljust(20) + 'Flags'.ljust(10) + 'Link'.ljust(10) + 'Info'.ljust(10)
                        + 'Align'.ljust(20))

        count = 0
        for cur in self.section_header_list:
            print('  [%2d] ' % count + cur['sh_name'].ljust(20) + cur['sh_type'].ljust(20) + ('%016x' % cur['sh_addr']).ljust(20)
                 + ('%08x' % cur['sh_offset']).ljust(20))
            print('       ' + ('%016x' % cur['sh_entsize']).ljust(20) + ('%016x' % cur['sh_size']).ljust(20) 
                 + ('%08x' % cur['sh_flags']).ljust(10) + ('%08x' % cur['sh_link']).ljust(10)
                 + ('%08x' % cur['sh_info']).ljust(10) + ('%08x' % cur['sh_addralign']).ljust(10))
            count = count + 1

    def dynamic_section_parser(self):
        self.dynamic_section_list = []
        self.dynamic_section_offset = 0
        self.dynamic_section_count = 0
        self.dynamic_strtab = 0

        p_offset = -1
        for program in self.program_header_list:
            if program['p_type'] == 'DYNAMIC':
                p_offset = program['p_offset']
                break;
        if p_offset == -1:
            raise Exception("Dynamic section not found!")

        if self.e_ident[4] == 1:
            step = 8
        else:
            step = 16

        start = p_offset
        self.dynamic_section_offset = p_offset

        while True:
            if self.e_ident[4] == 1:
                tag = struct.unpack('<l', self.data[start : start + 4])[0]
                value = struct.unpack('<l', self.data[start + 4: start + 8])[0]
            else:
                tag = struct.unpack('<Q', self.data[start : start + 8])[0]
                value = struct.unpack('<Q', self.data[start + 8: start + 8 + 8])[0]

            if tag == 5:
                self.dynamic_strtab = value
                s_type = 'STRTAB'
                break
            if tag == 0:
                break

            start = start + step

        start = p_offset
        self.dynamic_section_count = 0
        while True:
            self.dynamic_section_count = self.dynamic_section_count + 1
            if self.e_ident[4] == 1:
                tag = struct.unpack('<l', self.data[start : start + 4])[0]
                value = struct.unpack('<l', self.data[start + 4: start + 8])[0]
            else:
                tag = struct.unpack('<Q', self.data[start : start + 8])[0]
                value = struct.unpack('<Q', self.data[start + 8: start + 8 + 8])[0]
            
            s_type = ''
            name = ''
            if(tag == 0):
                s_type = 'NULL'
            elif(tag == 1):
                s_type = 'NEEDED'
                name = self.help_print_string(self.dynamic_strtab + tag)
            elif(tag == 2):
                s_type = 'PLTRELSZ'
            elif(tag == 3):
                s_type = 'PLTGOT'
            elif(tag == 4):
                s_type = 'HASH'
            elif(tag == 5):
                self.dynamic_strtab = value
                s_type = 'STRTAB'
            elif(tag == 6):
                s_type = 'SYMTAB'
            elif(tag == 7):
                s_type = 'RELA'
            elif(tag == 8):
                s_type = 'RELASZ'
            elif(tag == 9):
                s_type = 'RELAENT'
            elif(tag == 10):
                s_type = 'STRSZ'
            elif(tag == 11):
                s_type = 'SYMENT'
            elif(tag == 12):
                s_type = 'INIT'
            elif(tag == 13):
                s_type = 'FINI'
            elif(tag == 14):
                s_type = 'SONAME'
            elif(tag == 15):
                s_type = 'RPATH'
            elif(tag == 16):
                s_type = 'SYMBOLIC'
            elif(tag == 17):
                s_type = 'REL'
            elif(tag == 18):
                s_type = 'ELSZ'
            elif(tag == 19):
                s_type = 'RELENT'
            elif(tag == 20):
                s_type = 'PLTREL'
            elif(tag == 21):
                s_type = 'DEBUG'
            elif(tag == 22):
                s_type = 'TEXTREL'
            elif(tag == 23):
                s_type = 'JMPREL'
            elif(tag == 24):
                s_type = 'BIND_NOW'
            elif(tag == 25):
                s_type = 'INIT_ARRAY'
            elif(tag == 26):
                s_type = 'FINI_ARRAY'
            elif(tag == 27):
                s_type = 'INIT_ARRAYSZ'
            elif(tag == 28):
                s_type = 'FINI_ARRAYSZ'
            elif(tag == 29):
                s_type = 'RUNPATH'
            elif(tag == 30):
                s_type = 'FLAGS'
            elif(tag == 31):
                s_type = 'ENCODING'
            elif(tag == 0x000000006ffffef5):
                s_type = 'GNU_HASH'
            elif(tag == 0x000000006ffffffb):
                s_type = 'FLAGS_1'
            elif(tag == 0x000000006ffffffe):
                s_type = 'VERNEED'
            elif(tag == 0x000000006fffffff):
                s_type = 'VERNEEDNUM'
            elif(tag == 0x000000006ffffff0):
                s_type = 'VERSYM'
            elif(tag == 0x000000006ffffff9):
                s_type = 'RELACOUNT'
            else:
                s_type = 'NULL'
                
            self.dynamic_section_list.append({'tag':tag, 'type':s_type, 'val':value, 'name':name})

            if(tag == 0):
                break
            start = start + step


    def dynamic_section_print(self):
        print('Dynamic section at offset 0x%x contains %d entries' % (self.dynamic_section_offset, self.dynamic_section_count)) 
        print('  Tag'.ljust(20) + 'Type'.ljust(20) + 'Name/Value')
            
        for cur in self.dynamic_section_list:
            print (('  %016x' % cur['tag']).ljust(20) + cur['type'].ljust(20) + '0x%x' % cur['val'] + ' ' +  cur['name'])

    
    def dynsym_parser(self):
        self.dynsym_offset = 0
        self.dynsym_list = []
        self.dynsym_size = 0
        self.dynsym_count = 0
        self.dynstr_offset = 0
        for section in self.section_header_list:
            if section['sh_name'] == '.dynsym':
                self.dynsym_offset = section['sh_offset']
                self.dynsym_size = section['sh_size']
                break

        if self.dynsym_offset == 0:
            raise Exception('.dynsym not found')

        for section in self.section_header_list:
            if section['sh_name'] == '.dynstr':
                self.dynstr_offset = section['sh_offset']
                break

        if self.dynstr_offset == 0:
            raise Exception('.dynstr not found')

        if self.e_ident[4] == 1:
            step = 4 + 4 + 4 + 1 + 1 + 2
        else:
            step = 4 + 1 + 1 + 2 + 8 + 8

        start = self.dynsym_offset
        size = 0
        while size < self.dynsym_size:
            if self.e_ident[4] == 1:
                pass
            else:
                name = struct.unpack('<l', self.data[start + size : start + size + 4])[0]
                info = struct.unpack('<B', self.data[start + size + 4 : start + size + 5])[0]
                other = struct.unpack('<B', self.data[start + size + 5 : start + size + 6])[0]
                shndx = struct.unpack('<H', self.data[start + size + 6 : start + size + 8])[0]
                st_value = struct.unpack('<Q', self.data[start + size + 8 : start + size + 16])[0]
                st_size = struct.unpack('<Q', self.data[start + size + 16 : start + size + 24])[0]

            sst_type = info & 0xf 
            if sst_type == 0:
                st_type = 'NOTYPE'
            elif sst_type == 1:
                st_type = 'OBJECT'
            elif sst_type == 2:
                st_type = 'FUNC'
            elif sst_type == 3:
                st_type = 'SECTION'
            elif sst_type == 4:
                st_type = 'FILE'
            elif sst_type == 5:
                st_type = 'COMMON'
            elif sst_type == 6:
                st_type = 'TLS'
            elif sst_type == 10:
                st_type = 'LOOPS'
            elif sst_type == 12:
                st_type == 'HIOS'
            elif sst_type == 13:
                st_type = 'LOPROC'
            elif sst_type == 14:
                st_type = 'SPARC_REGISTER'
            elif sst_type == 15:
                st_type = 'HIPROC'
            else:
                st_type = sst_type

            sst_bind = info >> 4
            if sst_bind == 0:
                st_bind = 'LOCAL'
            elif sst_bind == 1:
                st_bind = 'GLOBAL'
            elif sst_bind == 2:
                st_bint = 'WEAK' 
            elif sst_bind == 10:
                st_bint = 'LOOS'
            elif sst_bind == 12:
                st_bint = 'HIOS'
            elif sst_bind == 13:
                st_bint = 'LOPROC'
            elif sst_bind == 15:
                st_bint = 'HIPROC'
            else:
                st_bint = str(sst_bind)

            sst_vis = other & 0x3
            if sst_vis == 0:
                st_vis = 'DEFAULT'
            elif sst_vis == 1:
                st_vis = 'INTERNAL'
            elif sst_vis == 2:
                st_vis  = 'HIDDEN'
            elif sst_vis == 3:
                st_vis = 'PROTECTED'
            elif sst_vis == 4:
                st_vis = 'EXPORTED'
            elif sst_vis == 5:
                st_vis = 'SINGLETON'
            elif sst_vis == 6:
                st_vis = 'ELIMINATE'
            else:
                st_vis = str(sst_vis)

            sst_shndx = shndx 
            if sst_shndx == 0:
                st_shndx = 'UNDEF'
            elif sst_shndx == 0xff00:
                st_shndx = 'LORESERVE'
            elif sst_shndx == 0xff00:
                st_shndx = 'LOPROC'
            elif sst_shndx == 0xff01:
                st_shndx = 'AFTER' 
            elif sst_shndx == 0xff02:
                st_shndx = 'AMD64_LCOMMON'
            elif sst_shndx == 0xff1f:
                st_shndx = 'HIPROC'
            elif sst_shndx == 0xff20:
                st_shndx = 'LOOS'
            elif sst_shndx == 0xff3f:
                st_shndx = 'LOSUNW'
            elif sst_shndx == 0xfff1:
                st_shndx = 'ABS' 
            elif sst_shndx == 0xfff2:
                st_shndx = 'COMMON'
            elif sst_shndx == 0xffff:
                st_shndx = 'XINDEX'
            else:
                st_shndx = str(shndx)

            self.dynsym_list.append({"st_id" : self.dynsym_count, "st_value":st_value, "st_size":st_size, "st_type":st_type, "st_bind":st_bind,
                "st_vis":st_vis, "st_shndx":st_shndx, "st_name":self.help_print_string(self.dynstr_offset + name)})

            size += step
            self.dynsym_count += 1


    def dynsym_print(self):
        print("Symbol table '.dynsym' contains %d entries:" % self.dynsym_count)
        print(' ' + 'Num'.ljust(5) + 'Value'.ljust(20) + 'Size'.ljust(8) + 'Type'.ljust(10) + 'Bind'.ljust(10) + 'Ndx'.ljust(10) + 'Name')
        for cur in self.dynsym_list:
            print(' ' + str(cur['st_id']).ljust(5) + ('%016x'%cur['st_value']).ljust(20) + ('%d'%cur['st_size']).ljust(8) 
                  + cur['st_type'].ljust(10) + cur['st_bind'].ljust(10) + cur['st_shndx'].ljust(10) + cur['st_name'])

    def rela_parser(self):
        self.rela_type_x32 = {}
        self.rela_type_x64 = {} 
        self.rela_list = []

        self.rela_type_x64[0] = 'R_AMD64_NONE'
        self.rela_type_x64[1] = 'R_AMD64_64'
        self.rela_type_x64[2] = 'R_AMD64_PC32'
        self.rela_type_x64[3] = 'R_AMD64_GOT32'
        self.rela_type_x64[4] = 'R_AMD64_PLT32'
        self.rela_type_x64[5] = 'R_AMD64_COPY'
        self.rela_type_x64[6] = 'R_AMD64_GLOB_DAT'
        self.rela_type_x64[7] = 'R_AMD64_JUMP_SLOT'
        self.rela_type_x64[8] = 'R_AMD64_RELATIVE'
        self.rela_type_x64[9] = 'R_AMD64_GOTPCREL'
        self.rela_type_x64[10] = 'R_AMD64_32'
        self.rela_type_x64[11] = 'R_AMD64_32S'
        self.rela_type_x64[12] = 'R_AMD64_16'
        self.rela_type_x64[13] = 'R_AMD64_PC16'
        self.rela_type_x64[14] = 'R_AMD64_8'
        self.rela_type_x64[15] = 'R_AMD64_8'
       
        if self.e_class == 1:
            cur_rela_type = self.rela_type_x32
        
        if self.e_class == 2:
            cur_rela_type = self.rela_type_x64

        for sec in self.section_header_list:
            if sec['sh_name'].startswith('.rela'):
                self.rela_child_parser(sec, cur_rela_type)
    
    def rela_child_parser(self, sec, rela_type ):
        size = sec['sh_size']

        if self.e_class == 1:
            ais = 0x000000ff
            step = 12
            total = size / step

        if self.e_class == 2:
            ais = 0x00000000ffffffff
            step = 24
            total = size / step 

        self.rela_list.append({'name':sec['sh_name'], 'offset':sec['sh_offset'], 'count':total})
        start = sec['sh_offset']
        count = 0
        while count < total:
            if self.e_class == 1:
                addr = struct.unpack('<L', self.data[start : start + 4])[0]
                info = struct.unpack('<L', self.data[start + 4 : start + 8])[0]
                addend = struct.unpack('<l', self.data[start + 8 : start + 12])[0]
                sym = info >> 8
            if self.e_class == 2:
                addr = struct.unpack('<Q', self.data[start : start + 8])[0]
                info = struct.unpack('<Q', self.data[start + 8 : start + 16])[0]
                addend = struct.unpack('<q', self.data[start + 16 : start + 24])[0]
                sym = info >> 32
            
            dynsym = self.dynsym_list[sym]

            if sym == 0:
                value = ''
                st_name = addend
            else:
                value = sym
                st_name = dynsym['st_name']

            self.rela_list.append({'offset' : addr, 'info' : info, 'type' : rela_type[info & ais], 'value':value , 'rela_name': st_name})

            count = count + 1
            start = start + step

    def rela_print(self):
        for cur in self.rela_list:
            if 'name' in cur:
                print("\nRelocation section %s at offset 0x%x contains %d entries:" % (cur['name'], cur['offset'], cur['count'])) 
                print('Offset'.ljust(20) + 'Info'.ljust(20) + 'Type'.ljust(20) + 'Sym. Value'.ljust(20) + 'Sym. Name + Addend'.ljust(20))
            else:
                if cur['value'] != '':
                        value = ('%016x' % cur['value']).ljust(20)
                        rela_name = cur['rela_name']
                else:
                        value = ''.ljust(20)
                        rela_name = ('%x' % cur['rela_name']).ljust(20)
                print(('%016x'%cur['offset']).ljust(20) + ('%016x'%cur['info']).ljust(20) + cur['type'].ljust(20) + value + rela_name)

    def help_print_string(self, offset):
        res = ''
        for cur in self.data[offset:]:
            if cur == 0:
                break
            res = res + chr(cur)
            
        return res 

def main():
    parser = argparse.ArgumentParser(prog = "myreadelf")
    parser.add_argument('-H', action = 'store_true', default = False) #ELF header
    parser.add_argument('-P', action = 'store_true', default = False) #Program header
    parser.add_argument('-S', action = 'store_true', default = False) #Section header
    parser.add_argument('-D', action = 'store_true', default = False) #dynamic section
    parser.add_argument('-s', action = 'store_true', default = False) #symbol table
    parser.add_argument('-r', action = 'store_true', default = False) #relocation section
    parser.add_argument('filename')
    args = parser.parse_args()

    elf_object = Elf(args.filename) 

    if(args.H):
        elf_object.header_print()
    if(args.P):
        elf_object.program_header_print()
    if(args.S):
        elf_object.section_header_print()
    if(args.D):
        elf_object.dynamic_section_print()
    if(args.s):
        elf_object.dynsym_print()
    if(args.r):
        elf_object.rela_print()

if __name__ == "__main__":
    main()
